/* wiringpi.cc
**
** Heavivly modified by csquared
*/

#include <node.h>
#include <v8.h>
#include <wiringPi.h>
#include <wiringPiSPI.h>

using namespace v8;

char channel_headers[] = { 0b10000000, 0b10010000, 0b10100000, 0b10110000, 0b11000000, 0b11010000, 0b11100000, 0b11110000 };

Handle<Value> Num_Pins( const Arguments& args ) {
  HandleScope scope;
  return scope.Close( Number::New( NUM_PINS ) );
}

Handle<Value> Pin_Mode( const Arguments& args ) {
  HandleScope scope;
  pinMode( args[0]->NumberValue(), args[1]->NumberValue() );
  return scope.Close( Undefined() );
}

Handle<Value> Digital_Write( const Arguments& args ) {
  HandleScope scope;
  digitalWrite( args[0]->NumberValue(), args[1]->NumberValue() );
  return scope.Close( Undefined() );
}

Handle<Value> Digital_Read( const Arguments& args ) {
  HandleScope scope;
  Local<Integer> result = Integer::New( digitalRead( args[0]->NumberValue() ) );
  return scope.Close( result );
}

Handle<Value> Setup_SPI( const Arguments& args ) {
  HandleScope scope;
  int MCP_CHANNEL   = args[0]->NumberValue();
  int MCP_FREQUENCY = args[1]->NumberValue();
  int value = wiringPiSPISetup(MCP_CHANNEL, MCP_FREQUENCY);
  Local<Integer> result = Integer::New(value);
  return scope.Close( result );
}

Handle<Value> MCP_read_channel( const Arguments& args ) {
  HandleScope scope;
  int spi_channel = args[0]->NumberValue();
  int mcp_channel = args[1]->NumberValue();
  uint8_t buffer[] = { 0x01, channel_headers[mcp_channel], 0x00 };
  int reading;
  wiringPiSPIDataRW(spi_channel, buffer, 3);
  reading = ((buffer[1] & 3) << 8) + buffer[2];
  return scope.Close( Number::New(reading) );
}

void init(Handle<Object> target) {
    if( -1 == wiringPiSetupGpio() ) {
        ThrowException( Exception::TypeError( String::New( "Bad argument type" ) ) );
        return;
    }

    // Setup a few constants
    Local<Object> PIN_MODE = Object::New();
    target->Set( String::New( "PIN_MODE" ), PIN_MODE );
    PIN_MODE->Set( String::New( "INPUT" ), Number::New( INPUT ) );
    PIN_MODE->Set( String::New( "OUTPUT" ), Number::New( OUTPUT ) );
    PIN_MODE->Set( String::New( "PWM_OUTPUT" ), Number::New( PWM_OUTPUT ) );

    Local<Object> WRITE = Object::New();
    target->Set( String::New( "WRITE" ), WRITE );
    WRITE->Set( String::New( "LOW" ), Number::New( LOW ) );
    WRITE->Set( String::New( "HIGH" ), Number::New( HIGH ) );

    target->Set(String::NewSymbol("num_pins"),
                FunctionTemplate::New(Num_Pins)->GetFunction());
    target->Set(String::NewSymbol("pin_mode"),
                FunctionTemplate::New(Pin_Mode)->GetFunction());
    target->Set(String::NewSymbol("digital_write"),
                FunctionTemplate::New(Digital_Write)->GetFunction());
    target->Set(String::NewSymbol("digital_read"),
                FunctionTemplate::New(Digital_Read)->GetFunction());
    target->Set(String::NewSymbol("setup_spi"),
                FunctionTemplate::New(Setup_SPI)->GetFunction());
    target->Set(String::NewSymbol("mcp_read_channel"),
                FunctionTemplate::New(MCP_read_channel)->GetFunction());
}
NODE_MODULE(wiringpi, init)
